function [ court ] = courtDetection( fileName )

[~, name] = fileparts(fileName);

if(exist(['src\cache\' name '_courtDetect.mat'], 'file'))
    load(['src\cache\' name '_courtDetect.mat']);
    return;
end

if(exist(['src\cache\' name '_frame.mat'], 'file'))
    load(['src\cache\' name '_frame.mat']);
else
    videoObj = VideoReader(['video\' fileName]);
    videoFrames = read(videoObj);
    save(['src\cache\' name '_frame.mat'], 'videoFrames', '-v7.3');
end

close all
fig = figure;
for i = 200 : size(videoFrames,4)
    i
    l = whitePixelDetection(videoFrames(:,:,:,i));
    image(l*255)
%     pause
    [h, theta, rho] = hough(l);
    peaks = houghpeaks(h, 10, 'Threshold', 0.2*max(h(:)), 'NHoodSize', [ceil(size(h,1)/100)+1 ceil(size(h,2)/100)+1]);
%     size(peaks)
    lines = houghlines(l, theta, rho, peaks);
%     clf(fig);
    verLines = {};
    horLines = {};
    for j = 1 : size(lines,2)
        if(abs(lines(j).theta)<45)
            verLines = [verLines lines(j)];
%             if(~exist('dl','var') || lines(j).rho < dl)
%                 dl = lines(j).rho;
%                 lLine = lines(j);
%             end
%             if(~exist('dr','var') || lines(j).rho > dr)
%                 dr = lines(j).rho;
%                 rLine = lines(j);
%             end
        else
            horLines = [horLines lines(j)];
%             if(~exist('dt','var') || lines(j).rho > dt)
%                 dt = lines(j).rho;
%                 tLine = lines(j);
%             end
%             if(~exist('dd','var') || lines(j).rho < dd)
%                 dd = lines(j).rho;
%                 bLine = lines(j);
%             end
        end
%         line([lines(j).point1(1) lines(j).point2(1)], [lines(j).point1(2) lines(j).point2(2)]);
%         lines(j).rho
%         pause
    end
    lx = inf;
    rx = -inf;
    size(verLines,2)
    for j = 1 : size(verLines,2)
        verLines(j).rho
        verLines(j).theta
        size(h,1)
        tmp = (verLines(j).rho - sin(verLines(j).theta)*(size(h,1)/2)) / cos(verLines(j).theta);
        if(tmp < lx)
            lLine = verLines(j);
            lx = tmp;
        end
        if(tmp > rx)
            rLine = verLines(j);
            rx = tmp;
        end
    end
    ty = -inf;
    by = inf;
    for j = 1 : size(horLines,2)
        if(horLines(j).rho > ty)
            tLine = horLines(j);
            ty = horLines(j).rho;
        end
        if(horLines(j).rho < by)
            bLine = horLines(j);
            by = horLines(j).rho;
        end
    end
    line([lLine.point1(1) lLine.point2(1)], [lLine.point1(2) lLine.point2(2)]);
    pause
    line([rLine.point1(1) rLine.point2(1)], [rLine.point1(2) rLine.point2(2)]);
    pause
    line([tLine.point1(1) tLine.point2(1)], [tLine.point1(2) tLine.point2(2)]);
    pause
    line([bLine.point1(1) bLine.point2(1)], [bLine.point1(2) bLine.point2(2)]);
%     lt = houghLineIntersect(lLine, tLine)
%     rt = houghLineIntersect(rLine, tLine)
%     lb = houghLineIntersect(lLine, bLine)
%     rb = houghLineIntersect(rLine, bLine)
    drawnow
    pause
end

court = 0;
% save(['src\cache\' name '_courtDetect.mat'], 'court');

end

